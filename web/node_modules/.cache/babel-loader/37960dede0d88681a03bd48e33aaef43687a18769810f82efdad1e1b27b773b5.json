{"ast":null,"code":"import toast from \"react-hot-toast\";\n\n/** validate login page username */\nexport async function usernameValidate(values) {\n  const errors = usernameVerify({}, values);\n  return errors;\n}\n\n/** validate password */\nexport async function passwordValidate(values) {\n  const errors = passwordVerify({}, values);\n  return errors;\n}\n\n/** validate password */\nfunction passwordVerify(errors = {}, values) {\n  const specialChars = /[`!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?~]/;\n  if (!values.password) {\n    errors.password = toast.error(\"Password Required...!\");\n  } else if (values.password.includes(\" \")) {\n    errors.password = toast.error(\"Wrong Password...!\");\n  } else if (values.password.length < 4) {\n    errors.password = toast.error(\"Password must be more than 4 characters long\");\n  } else if (!specialChars.test(values.password)) {\n    errors.password = toast.error(\"Password must have special character\");\n  }\n  return errors;\n}\n\n/** validate username */\n\nfunction usernameVerify(error = [], values) {\n  if (!values.username) {\n    error.username = toast.error('Username Required...!');\n  } else if (values.username.includes(\" \")) {\n    error.username = toast.error('Invalid Username...!');\n  }\n  return error;\n}","map":{"version":3,"names":["toast","usernameValidate","values","errors","usernameVerify","passwordValidate","passwordVerify","specialChars","password","error","includes","length","test","username"],"sources":["D:/Projects/super-fans-web/super-fans-web/src/helper/validate.js"],"sourcesContent":["import toast from \"react-hot-toast\";\r\n\r\n/** validate login page username */\r\nexport async function usernameValidate(values) {\r\n    const errors = usernameVerify({}, values);\r\n\r\n    return errors;\r\n}\r\n\r\n/** validate password */\r\nexport async function passwordValidate(values) {\r\n    const errors = passwordVerify({}, values);\r\n    return errors;\r\n}\r\n\r\n\r\n\r\n/** validate password */\r\nfunction passwordVerify(errors = {}, values){\r\n    const specialChars = /[`!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?~]/;\r\n\r\n    if(!values.password){\r\n        errors.password = toast.error(\"Password Required...!\");\r\n    } else if(values.password.includes(\" \")){\r\n        errors.password = toast.error(\"Wrong Password...!\");\r\n    }else if(values.password.length < 4){\r\n        errors.password = toast.error(\"Password must be more than 4 characters long\");\r\n    }else if(!specialChars.test(values.password)){\r\n        errors.password = toast.error(\"Password must have special character\");\r\n    }\r\n\r\n    return errors;\r\n}\r\n\r\n\r\n/** validate username */\r\n\r\nfunction usernameVerify(error = [], values) {\r\n    if(!values.username) {\r\n        error.username = toast.error('Username Required...!');\r\n    } else if (values.username.includes(\" \")) {\r\n        error.username = toast.error('Invalid Username...!');\r\n    }\r\n    return error;\r\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,iBAAiB;;AAEnC;AACA,OAAO,eAAeC,gBAAgBA,CAACC,MAAM,EAAE;EAC3C,MAAMC,MAAM,GAAGC,cAAc,CAAC,CAAC,CAAC,EAAEF,MAAM,CAAC;EAEzC,OAAOC,MAAM;AACjB;;AAEA;AACA,OAAO,eAAeE,gBAAgBA,CAACH,MAAM,EAAE;EAC3C,MAAMC,MAAM,GAAGG,cAAc,CAAC,CAAC,CAAC,EAAEJ,MAAM,CAAC;EACzC,OAAOC,MAAM;AACjB;;AAIA;AACA,SAASG,cAAcA,CAACH,MAAM,GAAG,CAAC,CAAC,EAAED,MAAM,EAAC;EACxC,MAAMK,YAAY,GAAG,yCAAyC;EAE9D,IAAG,CAACL,MAAM,CAACM,QAAQ,EAAC;IAChBL,MAAM,CAACK,QAAQ,GAAGR,KAAK,CAACS,KAAK,CAAC,uBAAuB,CAAC;EAC1D,CAAC,MAAM,IAAGP,MAAM,CAACM,QAAQ,CAACE,QAAQ,CAAC,GAAG,CAAC,EAAC;IACpCP,MAAM,CAACK,QAAQ,GAAGR,KAAK,CAACS,KAAK,CAAC,oBAAoB,CAAC;EACvD,CAAC,MAAK,IAAGP,MAAM,CAACM,QAAQ,CAACG,MAAM,GAAG,CAAC,EAAC;IAChCR,MAAM,CAACK,QAAQ,GAAGR,KAAK,CAACS,KAAK,CAAC,8CAA8C,CAAC;EACjF,CAAC,MAAK,IAAG,CAACF,YAAY,CAACK,IAAI,CAACV,MAAM,CAACM,QAAQ,CAAC,EAAC;IACzCL,MAAM,CAACK,QAAQ,GAAGR,KAAK,CAACS,KAAK,CAAC,sCAAsC,CAAC;EACzE;EAEA,OAAON,MAAM;AACjB;;AAGA;;AAEA,SAASC,cAAcA,CAACK,KAAK,GAAG,EAAE,EAAEP,MAAM,EAAE;EACxC,IAAG,CAACA,MAAM,CAACW,QAAQ,EAAE;IACjBJ,KAAK,CAACI,QAAQ,GAAGb,KAAK,CAACS,KAAK,CAAC,uBAAuB,CAAC;EACzD,CAAC,MAAM,IAAIP,MAAM,CAACW,QAAQ,CAACH,QAAQ,CAAC,GAAG,CAAC,EAAE;IACtCD,KAAK,CAACI,QAAQ,GAAGb,KAAK,CAACS,KAAK,CAAC,sBAAsB,CAAC;EACxD;EACA,OAAOA,KAAK;AAChB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}